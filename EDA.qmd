---
title: "ST558 Final Project EDA - Lee Worthington"
format: html
editor: visual
---

# Intro

> ### Data Overview
> The dataset used for this analysis is derived from the Behavioral Risk Factor Surveillance System (BRFSS) 2015, a health-related telephone survey conducted annually by the Centers for Disease Control and Prevention (CDC). The BRFSS collects data from over 400,000 Americans on health-related risk behaviors, chronic health conditions, and the use of preventative services.
>
> For this project Ill focus on the diabetes_binary_health_indicators_BRFSS2015.csv file that contains 253680 survey responses, the main goal is to predict Diabetes_binary which has the below levels.
> - 0: No diabetes
> - 1: Prediabetes or diabetes
>
> There are 21 potential predictors in the data, since I dont know anything about diabetes I will be using all of the predictors when modelling rather than making assumptions about what may be relevant
>
> - **HighBP**: High blood pressure (N/Y)
> - **HighChol**: High cholesterol (N/Y)
> - **CholCheck**: Cholesterol check within the past five years (N/Y)
> - **BMI**: Body mass index (numeric)
> - **Smoker**: Smoker status (N/Y)
> - **Stroke**: History of stroke (N/Y)
> - **HeartDiseaseorAttack**: Coronary heart disease or myocardial infarction (N/Y)
> - **PhysActivity**: Physical activity in the past 30 days (N/Y)
> - **Fruits**: Consumption of fruits at least once per day (N/Y)
> - **Veggies**: Consumption of vegetables at least once per day (N/Y)
> - **HvyAlcoholConsump**: Heavy alcohol consumption (N/Y)
> - **AnyHealthcare**: Access to healthcare coverage (N/Y)
> - **NoDocbcCost**: Inability to see a doctor due to cost (N/Y)
> - **GenHlth**: General health status (Excellent/VGood/Good/Fair/Poor)
> - **MentHlth**: Days in the past 30 days when mental health was not good (numeric)
> - **PhysHlth**: Days in the past 30 days when physical health was not good (numeric)
> - **DiffWalk**: Difficulty walking or climbing stairs (N/Y)
> - **Sex**: Gender (F/M)
> - **Age**: Age categories (18-24, 25-29, 30-34, 35-39, 40-44, 45-49, 50-54, 55-59, 60-64, 65-69, 70-74, 75-79, 80+)
> - **Education**: Education level (No School, Elem, Some HS, HS Grad, Some College, College Grad)
> - **Income**: Income categories (<$10k, $10-15k, $15-20k, $20-25k, $25-35k, $35-50k, $50-75k, >$75k)

> ### Purpose of EDA and Modeling Goal
> The main goal of the EDA here is to get a better idea of the data and to spot potential relationships in the data, to hopefully build a model that can accurately predict diabetes based on the available predictors.
> Since most of the predictors are categorical and there are a large number of them, I will mainly focus on understanding the following in the EDA:
>
> 1. **Understanding the Distribution**: Primarily how the distributions for each predictor vary based on having or not having diabetes, in order to identify potentially relevant predictors
> 2. **Checking Data Quality**: ID any potential issues with the data, that may require adjustment. That being said my general approach is to not clean or remove data unless im certain its an error, which I cannot be with this data

# Setup environment and data
```{r}
#| eval: true
#| warning: false

# load libraries
library(tidyverse)
library(GGally)
library(caret)
library(corrplot)
library(reshape2)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(scales)
library(knitr)  # For rendering tables in Quarto

# set seed
set.seed(1)  

```

```{r}
#| eval: true
#| warning: false

# Read in the data https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/
input_data <- read_csv(
  'diabetes_binary_health_indicators_BRFSS2015.csv',
  show_col_types = FALSE
)
```

```{r}
#| eval: true
#| warning: false

# Data cleanup
df <- input_data |>
  mutate(
    Diabetes_binary = factor(Diabetes_binary, levels = c(0, 1, 2), labels = c("No", "Pre", "Yes")),
    
    HighBP = factor(HighBP, levels = c(0, 1), labels = c("N", "Y")),
    
    HighChol = factor(HighChol, levels = c(0, 1), labels = c("N", "Y")),
    
    CholCheck = factor(CholCheck, levels = c(0, 1), labels = c("N", "Y")),
    
    Smoker = factor(Smoker, levels = c(0, 1), labels = c("N", "Y")),
    
    Stroke = factor(Stroke, levels = c(0, 1), labels = c("N", "Y")),
    
    HeartDiseaseorAttack = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c("N", "Y")),
    
    PhysActivity = factor(PhysActivity, levels = c(0, 1), labels = c("N", "Y")),
    
    Fruits = factor(Fruits, levels = c(0, 1), labels = c("N", "Y")),
    
    Veggies = factor(Veggies, levels = c(0, 1), labels = c("N", "Y")),
    
    HvyAlcoholConsump = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c("N", "Y")),
    
    AnyHealthcare = factor(AnyHealthcare, levels = c(0, 1), labels = c("N", "Y")),
    
    NoDocbcCost = factor(NoDocbcCost, levels = c(0, 1), labels = c("N", "Y")),
    
    GenHlth = factor(GenHlth, levels = c(1, 2, 3, 4, 5), labels = c("Exc", "VGood", "Good", "Fair", "Poor")),
    
    DiffWalk = factor(DiffWalk, levels = c(0, 1), labels = c("N", "Y")),
    
    Sex = factor(Sex, levels = c(0, 1), labels = c("F", "M")),
    
    Age = factor(
      Age, 
      levels = 1:13, 
      labels = c("18-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80+")
    ),
    
    Education = factor(
      Education, 
      levels = 1:6, 
      labels = c(
        "None/Kinder", "Elem", "Some HS", 
        "HS Grad", "Some College", "College Grad"
      )
    ),
    
    Income = factor(
      Income, 
      levels = 1:8, 
      labels = c(
        "<$10k", "$10-15k", "$15-20k", "$20-25k", 
        "$25-35k", "$35-50k", "$50-75k", ">$75k"
      )
    )
  )

```

# EDA
## Print summary results
```{r}
#| eval: true
#| warning: false

summary(df)

```

> Based on the dataset descriptions and the data, these are the variables and types:
>
> - **Diabetes_binary**: Factor (0: No diabetes, 1: Prediabetes or diabetes)
> - **HighBP**: Factor (0: No, 1: Yes)
> - **HighChol**: Factor (0: No, 1: Yes)
> - **CholCheck**: Factor (0: No, 1: Yes)
> - **BMI**: Numeric
> - **Smoker**: Factor (0: No, 1: Yes)
> - **Stroke**: Factor (0: No, 1: Yes)
> - **HeartDiseaseorAttack**: Factor (0: No, 1: Yes)
> - **PhysActivity**: Factor (0: No, 1: Yes)
> - **Fruits**: Factor (0: No, 1: Yes)
> - **Veggies**: Factor (0: No, 1: Yes)
> - **HvyAlcoholConsump**: Factor (0: No, 1: Yes)
> - **AnyHealthcare**: Factor (0: No, 1: Yes)
> - **NoDocbcCost**: Factor (0: No, 1: Yes)
> - **GenHlth**: Factor with 5 levels (1: Excellent, 2: Very good, 3: Good, 4: Fair, 5: Poor)
> - **MentHlth**: Numeric
> - **PhysHlth**: Numeric
> - **DiffWalk**: Factor (0: No, 1: Yes)
> - **Sex**: Factor with 2 levels (0: Female, 1: Male)
> - **Age**: Factor with 13 levels (1: 18-24, 2: 25-29, 3: 30-34, 4: 35-39, 5: 40-44, 6: 45-49, 7: 50-54, 8: 55-59, 9: 60-64, 10: 65-69, 11: 70-74, 12: 75-79, 13: 80 or older)
> - **Education**: Factor with 6 levels (1: Never attended school or only kindergarten, 2: Grades 1 through 8, 3: Grades 9 through 11, 4: Grade 12 or GED, 5: College 1 year to 3 years, 6: College 4 years or more)
> - **Income**: Factor with 8 levels (1: Less than $10,000, 2: $10,000 to less than $15,000, 3: $15,000 to less than $20,000, 4: $20,000 to less than $25,000, 5: $25,000 to less than $35,000, 6: $35,000 to less than $50,000, 7: $50,000 to less than $75,000, 8: $75,000 or more)

> Some notes
>
> - In the kraggle notes they say Diabetes_binary should have 3 levels (0 = no diabetes 1 = prediabetes 2 = diabetes), but there are no records with value = 2

## Code for plots
```{r}
#| eval: true
#| warning: false

# plot pairs
#GGally::ggpairs(df, columns = c(1, 2, 3, 4)) 
#GGally::ggpairs(df, columns = c(1, 5, 6, 7))
#GGally::ggpairs(df, columns = c(1, 8, 9, 10))
#GGally::ggpairs(df, columns = c(1, 11, 12, 13))
#GGally::ggpairs(df, columns = c(1, 14, 15, 16))
#GGally::ggpairs(df, columns = c(1, 17, 18, 19))
# Mosts of these are ahrd to read and not very informative, use custom plots instead

# Define different variable types
factor_vars_heatmap <- c(
  "HighBP", "HighChol", "CholCheck", "Smoker", "Stroke", "HeartDiseaseorAttack",
  "PhysActivity", "Fruits", "Veggies", "HvyAlcoholConsump", "AnyHealthcare",
  "NoDocbcCost", "DiffWalk", "Sex"
)
factor_vars_histogram <- c("GenHlth", "Age", "Education", "Income")
numeric_vars <- c("BMI", "MentHlth", "PhysHlth")

# Function to generate heatmap for confusion matrix of factor variables
generate_heatmap <- function(var) {
  confusion <- table(df$Diabetes_binary, df[[var]])
  confusion_melted <- melt(confusion)
  confusion_melted$percentage <- confusion_melted$value / sum(confusion_melted$value) * 100
  confusion_melted$label <- paste(comma(confusion_melted$value), sprintf("(%.1f%%)", confusion_melted$percentage))
  
  ggplot(confusion_melted, aes(Var1, Var2, fill = value)) +
    geom_tile(alpha = 0.5) +
    geom_text(aes(label = label), color = "black") +
    scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
    labs(title = paste("Confusion Matrix for", var),
         x = "Diabetes_binary",
         y = var,
         fill = "Count") +
    theme_minimal() +
    scale_x_discrete(labels = c("0", "1")) +
    scale_y_discrete(labels = c("0", "1"))
}

# Function to generate histogram for numeric variables with log scale on x-axis
generate_histogram_numeric <- function(var) {
  ggplot(df, aes_string(x = var, fill = "Diabetes_binary")) +
    geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
    #scale_x_log10() +
    labs(title = paste("Histogram of", var, "partitioned by Diabetes_binary (Log Scale)"), x = var, y = "Count") +
    theme_minimal()
}

# Function to generate boxplot for numeric variables
generate_boxplot_numeric <- function(var) {
  ggplot(df, aes(x = Diabetes_binary, y = df[[var]], fill = Diabetes_binary)) +
    geom_boxplot(alpha = 0.5) +
    scale_y_log10() +
    labs(title = paste("Boxplot of", var, "partitioned by Diabetes_binary"), x = "Diabetes_binary", y = var) +
    theme_minimal()
}

# Function to generate bar plot for factor variables with more than 3 levels
generate_histogram_factor <- function(var) {
  df |>
    group_by(!!sym(var), Diabetes_binary) |>
    
    summarise(count = n(), .groups = "drop") |>
    
    group_by(!!sym(var)) |>
    
    mutate(
      percentage = count / sum(count) * 100,
      label = paste0(sprintf("%.1f", percentage), "%")
    ) |>
    
    ggplot(aes_string(x = var, y = "count", fill = "Diabetes_binary")) +
    geom_bar(position = "stack", stat = "identity", alpha = 0.5) +
    geom_text(aes(label = label), position = position_stack(vjust = 0.5), color = "black") +
    labs(title = paste("Bar Plot of", var, "partitioned by Diabetes_binary"), x = var, y = "Count") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}

```

## Generate plots
```{r}
#| eval: true
#| warning: false

# Generate heatmaps for factor variables with up to 3 levels
for (var in factor_vars_heatmap) {
  print(generate_heatmap(var))
}

# Generate histograms for factor variables with more than 3 levels
for (var in factor_vars_histogram) {
  print(generate_histogram_factor(var))
}

# Generate histograms and box-plots for numeric variables with log scale on x-axis
for (var in numeric_vars) {
  print(generate_histogram_numeric(var))
  print(generate_boxplot_numeric(var))
}

```


> Based on the plots above, these are my main conclusions
>
> - The data looks complete and there are no obvious issues that pop out to me
> - Almost all the potential predictors look relevant, based on how either the heatmaps or plots are very lopsided/skewed depending on the factor levels












